# Multi-stage Dockerfile para producci贸n
FROM python:3.11-slim as builder

WORKDIR /app

# Instalar dependencias del sistema necesarias para compilar
RUN apt-get update && apt-get install -y \
    gcc \
    g++ \
    postgresql-client \
    libpq-dev \
    python3-dev \
    && rm -rf /var/lib/apt/lists/*

# Copiar requirements y instalar dependencias
COPY requirements.txt .
RUN pip install --no-cache-dir --user -r requirements.txt

# =============================================================
# Stage final de producci贸n
FROM python:3.11-slim

# Crear usuario no-root para seguridad
RUN useradd -m -u 1000 appuser

WORKDIR /app

# Instalar solo las dependencias runtime necesarias
RUN apt-get update && apt-get install -y \
    libpq5 \
    postgresql-client \
    && rm -rf /var/lib/apt/lists/*

# Copiar las dependencias de Python desde el builder
COPY --from=builder /root/.local /home/appuser/.local

# Copiar el c贸digo de la aplicaci贸n
COPY --chown=appuser:appuser . .

# Crear directorios con permisos correctos
RUN mkdir -p /app/staticfiles /app/mediafiles /app/logs && \
    chown -R appuser:appuser /app && \
    chmod -R 755 /app/logs

# Asegurar que el PATH incluya los binarios de pip
ENV PATH=/home/appuser/.local/bin:$PATH
ENV PYTHONDONTWRITEBYTECODE=1
ENV PYTHONUNBUFFERED=1

# Cambiar al usuario no-root
USER appuser

# Exponer el puerto
EXPOSE 8000

# Comando por defecto
CMD ["gunicorn", "--bind", "0.0.0.0:8000", "--workers", "3", "--timeout", "120", "clmundo.wsgi:application"]