version: '3.8'

services:
  # Nginx como reverse proxy
  nginx:
    image: nginx:alpine
    container_name: clmundo_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - static_volume:/app/staticfiles:ro
      - media_volume:/app/mediafiles:ro
    depends_on:
      - web
    restart: unless-stopped
    networks:
      - clmundo_network

  # Django Web Application
  web:
    build:
      context: .
      dockerfile: Dockerfile.prod
    container_name: clmundo_web
    command: gunicorn --bind 0.0.0.0:8000 --workers 4 --threads 2 --timeout 120 --access-logfile - --error-logfile - clmundo.wsgi:application
    volumes:
      - static_volume:/app/staticfiles
      - media_volume:/app/mediafiles
      - ./logs:/app/logs
    env_file:
      - .env.prod
    expose:
      - "8000"
    depends_on:
      - db
      - redis
    restart: unless-stopped
    networks:
      - clmundo_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    container_name: clmundo_db
    volumes:
      - postgres_data:/var/lib/postgresql/data/
      - ./backups:/backups
    env_file:
      - .env.prod
    environment:
      - POSTGRES_DB=${DB_NAME}
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
    restart: unless-stopped
    networks:
      - clmundo_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis para Celery
  redis:
    image: redis:7-alpine
    container_name: clmundo_redis
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    restart: unless-stopped
    networks:
      - clmundo_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # Celery Worker
  celery_worker:
    build:
      context: .
      dockerfile: Dockerfile.prod
    container_name: clmundo_celery_worker
    command: celery -A clmundo worker -l info --concurrency=2
    volumes:
      - ./logs:/app/logs
    env_file:
      - .env.prod
    depends_on:
      - db
      - redis
    restart: unless-stopped
    networks:
      - clmundo_network

  # Celery Beat (scheduler)
  celery_beat:
    build:
      context: .
      dockerfile: Dockerfile.prod
    container_name: clmundo_celery_beat
    command: celery -A clmundo beat -l info --scheduler django_celery_beat.schedulers:DatabaseScheduler
    volumes:
      - ./logs:/app/logs
    env_file:
      - .env.prod
    depends_on:
      - db
      - redis
    restart: unless-stopped
    networks:
      - clmundo_network

  # Flower (Celery monitoring) - Opcional
  flower:
    build:
      context: .
      dockerfile: Dockerfile.prod
    container_name: clmundo_flower
    command: celery -A clmundo flower --port=5555
    ports:
      - "5555:5555"
    env_file:
      - .env.prod
    depends_on:
      - celery_worker
      - redis
    restart: unless-stopped
    networks:
      - clmundo_network

volumes:
  postgres_data:
  redis_data:
  static_volume:
  media_volume:

networks:
  clmundo_network:
    driver: bridge
